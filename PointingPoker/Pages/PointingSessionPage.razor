@page "/pointing/{sessionId}"
@*@layout SessionLayout*@

@implements IDisposable
@using PointingPoker.Data
@using ChartJs.Blazor;
@using ChartJs.Blazor.ChartJS.BarChart
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Wrappers
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.Util
@inject IJSRuntime JSRuntime;
@inject UserManager UserManager
@inject NavigationManager NavigationManager
@inject PointingSessionManager PointingSessionManager

@if (_isLoading)
{
<h3 class="text-center m-auto">Loading...</h3>
}
else if (_session == null)
{
<h3 class="text-center m-auto">Woops! Couldn't find your session :(</h3>
}
else
{
<div class="w-100 h-100 p-3">
    <div class="main-row d-flex h-100">
        <div class="story-column flex-shrink-0">
            <div class="card h-100">
                <div class="d-flex flex-row justify-content-between align-items-center">
                    <h5 class="ml-3 mt-2 mb-2">Stories</h5>
                    <div class="d-flex flex-wrap flex-row pl-2">
                        <button class="btn pointing-session-control oi oi-plus ml-2 mr-2" title="Add Story" @onclick="@(e => _topicModal.Show("Add Story"))"/>
                        @*<button class="btn pointing-session-control oi oi-reload m-2" title="Reset Votes" />
                            <button class="btn pointing-session-control oi oi-cog m-2" data-toggle="modal" data-target="#ConfigureSessionWindow" title="Configure Session" />*@
                    </div>
                </div>
                <div class="card-body p-0" style="min-height:0; overflow-y:auto; overflow-x:hidden">
                    <table class="table">
                        <thead>
                            <tr>
                                <th scope="col">Name</th>
                                <th scope="col">Status</th>
                                <th scope="col">Result</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var topic in _session.Topics)
                            {
                                <tr>
                                    <td>@topic.Topic.Name</td>
                                    <td>Upcoming</td>
                                    <td>0.3</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="voting-column flex-grow-1">
            <div class="card h-100">
                <div class="d-flex flex-row justify-content-between">
                    <ul class="nav">
                        <li class="nav-item"><a class="nav-link active h-100" data-toggle="tab" href="#voting-view">Voting</a></li>
                        <li class="nav-item"><a class="nav-link h-100" data-toggle="tab" href="#results-view">Results</a></li>
                    </ul>

                    <div class="pointing-session-control-container d-flex flex-wrap flex-row pl-2">
                        <button @onclick="(e => _session.SetVotesShowing(SelectedTopicId, !_session.IsShowingTopic(SelectedTopicId)))" class="btn pointing-session-control oi oi-eye ml-2 mr-2 @(_session.IsShowingTopic(SelectedTopicId) ? "highlight" : "")" title="@(_session.IsShowingTopic(SelectedTopicId) ? "Hide Votes" : "Show Votes")" />
                        <button @onclick="(e => _session.ResetVotes(SelectedTopicId))" class="btn pointing-session-control oi oi-reload ml-2 mr-2" title="Reset Votes" />
                        <button class="btn pointing-session-control oi oi-cog ml-2 mr-2" data-toggle="modal" data-target="#ConfigureSessionWindow" title="Configure Session" />
                    </div>
                </div>
                <div class="card-body p-0 border-top" style="min-height:0">
                    <div class="tab-content h-100">
                        <div id="voting-view" class="tab-pane active">
                            <div class="d-flex flex-column w-100 h-100">
                                <div class="d-flex flex-row w-100 flex-grow-1" style="min-height:0">
                                    <div id="participant-column" class="d-flex flex-column flex-shrink-0 h-100 border-right" style="overflow-y:auto; overflow-x:hidden">
                                        <h6 class="m-2">Participants</h6>
                                        @foreach (var participant in _session.Participants)
                                        {
                                            var userVote = _session.GetVoteByUserAndTopic(participant.UserId, SelectedTopicId);
                                            var voteOption = _session.Options.FirstOrDefault(o => o.Id == userVote?.OptionId);
                                            <div class="voting-participant d-flex flex-row pl-3 pr-3 align-items-center">
                                                <span class="oi oi-person voting-participant-icon @(userVote != null ? "voted" : "")" />
                                                <div class="voting-participant-text-container d-flex flex-column flex-grow-1 align-items-start pl-2 pt-1 pb-1 pr-2">
                                                    <span class="voting-participant-text">@(string.IsNullOrEmpty(participant.Name) ? "<No name>" : participant.Name)</span>
                                                    <div class="voting-participant-status">@(voteOption == null ? "Waiting..." : (!_session.IsShowingTopic(SelectedTopicId) ? "Voted!" : voteOption.Name))</div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                    <div class="d-flex flex-row mt-2 mb-2 justify-content-around flex-wrap w-100" style="overflow-y:auto; overflow-x:hidden">
                                        @foreach (var option in _session.Options)
                                        {
                                            <div class="voting-button-wrapper p-2">
                                                <button class="voting-button w-100 h-100 btn @(SelectedVote != null && SelectedVote.OptionId == option.Id ? "btn-outline-success":"btn-outline-info") p-2 m-1" @onclick="(e => Vote(option.Id))">@option.Name</button>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="results-view" class="tab-pane">
                            <ChartJsBarChart @ref="_barChart" Config="@_barChartConfig"></ChartJsBarChart>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @* Modals *@
    @* Story modal *@
    <TopicModal @ref="_topicModal" Command="((name, description) => _session.AddTopic(new Topic(name, description)))"/>

    @* Join session modal *@
    <div class="modal fade active show" id="JoinSessionWindow" tabindex="-1" role="dialog" aria-labelledby="JoinSessionWindow" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Join Session</h5>
                    @*<button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>*@
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="join-username">Participant Name</label>
                        <input id="join-username" class="form-control col-12" placeholder="Participant Name" @bind="@_joinUsername" />
                    </div>
                    <div class="form-group">
                        <label for="participant-type-toggles" style="width:100%">Role</label>
                        <div id="participant-type-toggles" class="btn-group btn-group-toggle">
                            <label class="btn btn-outline-primary @(_joinRoleSelection.Equals(ParticipantType.Observer) ? "active" : "")">
                                <input type="radio" name="JoinRole" id="JoinAsObserver" @onclick="(e => _joinRoleSelection = ParticipantType.Observer)">Observer
                            </label>
                            <label class="btn btn-outline-primary @(_joinRoleSelection.Equals(ParticipantType.Voter) ? "active" : "")">
                                <input type="radio" name="JoinRole" id="JoinAsVoter" @onclick="(e => _joinRoleSelection = ParticipantType.Voter)">Voter
                            </label>
                            <label class="btn btn-outline-primary @(_joinRoleSelection.Equals(ParticipantType.Moderator) ? "active" : "")">
                                <input type="radio" name="JoinRole" id="JoinAsModerator" @onclick="(e => _joinRoleSelection = ParticipantType.Moderator)">Moderator
                            </label>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary @(string.IsNullOrEmpty(_joinUsername) ? "disabled" : "")" @onclick="(e => Join(_joinUsername, _joinRoleSelection))" data-dismiss="@(!string.IsNullOrEmpty(_joinUsername) ? "modal" : "")">Join</button>
                </div>
            </div>
        </div>
    </div>

    @* Configure session modal *@
    <div class="modal fade" id="ConfigureSessionWindow" tabindex="-1" role="dialog" aria-labelledby="ConfigureSessionWindow" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Configure Session</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <h4 class="card-title text-center col-8 offset-2 mt-1">Pointing Options</h4>
                        <div class="col-2 mb-1">
                            <button class="btn btn-primary float-right" @onclick="AddPointingOption">Add</button>
                        </div>
                    </div>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Value</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var option in _session.Options)
                            {
                                <tr>
                                    <td>
                                        <input class="form-control" type="text" value="@option.Name" @onchange="(e => UpdatePointingOption(option.Id, e.Value.ToString(), option.Value))" />
                                    </td>
                                    <td>
                                        <input class="form-control" type="text" value="@option.Value" @onchange="(e => UpdatePointingOption(option.Id, option.Name, e.Value.ToString()))" />
                                    </td>
                                    <td>
                                        <a class="oi oi-trash" style="cursor: pointer;" @onclick="(() => _session.RemoveOption(option.Id))"></a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>
}


@code {
    private string _joinUsername = string.Empty;
    private ParticipantType _joinRoleSelection = ParticipantType.Observer;

    private bool _isLoading = true;
    private string _userId = string.Empty;
    private PointingSession _session = null;
    private BarConfig _barChartConfig;
    private ChartJsBarChart _barChart;
    private BarDataset<Int32Wrapper> _barDataSet;
    private TopicModal _topicModal;

    [Parameter]
    public string SessionId { get; set; } = string.Empty;

    public Participant Participant { get; set; }

    public string SelectedTopicId { get; set; }

    public Vote SelectedVote { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _session = PointingSessionManager.Get(SessionId);
        if (_session != null)
        {
            _session.OnVotesChanged += OnVotesChanged;
            _session.OnTopicsChanged += OnTopicsChanged;
            _session.OnOptionsChanged += OnOptionsChanged;
            _session.OnParticipantsChanged += OnParticipantsChanged;
            SelectedTopicId = _session.Topics.Select(t => t.Topic.Id).FirstOrDefault();


            _barChartConfig = new BarConfig(ChartType.Bar)
            {
                Options = new BarOptions
                {
                    //Title = new ChartJs.Blazor.ChartJS.Common.Properties.OptionsTitle { Display = true, Text = "Results" },
                    Responsive = true,
                    MaintainAspectRatio = false,
                    Scales = new BarScales
                    {
                        YAxes = new List<ChartJs.Blazor.ChartJS.Common.Axes.CartesianAxis>
                    {
                            new ChartJs.Blazor.ChartJS.Common.Axes.LinearCartesianAxis
                            {
                                Ticks = new ChartJs.Blazor.ChartJS.Common.Axes.Ticks.LinearCartesianTicks { AutoSkip = false, Min = 0 }
                            }
                        }
                    }
                }
            };

            _barChartConfig.Data.Labels.AddRange(_session.Options.Select(o => o.Name));
            _barDataSet = new BarDataset<Int32Wrapper>(ChartType.Bar);
            _barDataSet.Label = "Results";
            _barDataSet.BorderWidth = 1;
            _barDataSet.BackgroundColor = _session.Options.Select(o => ColorUtil.RandomColorString()).ToArray();
            _barChartConfig.Data.Datasets.Add(_barDataSet);
            await UpdateResultChart();
        }
        else
        {
            _isLoading = false;
        }
    }

    private void ConfigureSession()
    {
        NavigationManager.NavigateTo($"/configure/{_session.Id}");
    }

    private async Task UpdateResultChart()
    {
        _barDataSet.RemoveAll(e => true);
        var topic = _session.FindTopic(SelectedTopicId);
        if (topic != null && topic.IsShowing)
        {
            _barDataSet.AddRange(_session.Options.Select(o => topic.Votes.Where(v => v.OptionId == o.Id).Count()).Wrap());
        }

        if (_barChart != null)
        {
            await _barChart.Update();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _session != null)
        {
            _userId = await UserManager.GetUserIdAsync();
            Participant = _session.FindParticipant(_userId);
            SelectedVote = _session.GetVoteByUserAndTopic(_userId, SelectedTopicId);

            _isLoading = false;
            StateHasChanged();

            if (Participant == null)
            {
                await JSRuntime.InvokeAsync<string>("showJoinSession");
            }
        }
    }

    public void Dispose()
    {
        if (_session != null)
        {
            _session.OnVotesChanged -= OnVotesChanged;
            _session.OnTopicsChanged -= OnTopicsChanged;
            _session.OnOptionsChanged -= OnOptionsChanged;
            _session.OnParticipantsChanged -= OnParticipantsChanged;

            /*if (Participant != null)
            {
                _session.RemoveParticipant(_userId);
            }*/
        }
    }

    private void AddPointingOption()
    {
        _session.AddOption(new PointingOption("?", "?"));
    }

    private void UpdatePointingOption(string id, string name, string value)
    {
        _session.UpdateOption(new PointingOption(id, name, value));
    }

    private void ChangeSelectedTopic(string topicId)
    {
        SelectedTopicId = topicId;
        SelectedVote = _session.GetVoteByUserAndTopic(_userId, SelectedTopicId);
        UpdateResultChart();
    }

    private void LeaveSession()
    {
        _session.RemoveParticipant(_userId);
        Participant = null;
    }

    private void AddTopic(string name, string description)
    {
        _session.AddTopic(new Topic(name, description));
    }

    private void Join(string username, ParticipantType type)
    {
        if (!string.IsNullOrEmpty(username))
        {
            var participant = new Participant(_userId, username, type);
            _session.AddParticipant(participant);

            Participant = participant;
        }
    }

    private void Vote(string optionId)
    {
        if (Participant != null)
        {
            _session.Vote(_userId, SelectedTopicId, optionId);
        }
    }

    private void UpdatePointingTopic(string id, string text)
    {
        _session.UpdateTopic(new Topic(id, text));
    }

    private void OnVotesChanged()
    {
        SelectedVote = _session.GetVoteByUserAndTopic(_userId, SelectedTopicId);
        UpdateResultChart();
        InvokeAsync(StateHasChanged);
    }

    private void OnTopicsChanged()
    {
        SelectedVote = _session.GetVoteByUserAndTopic(_userId, SelectedTopicId);
        InvokeAsync(StateHasChanged);
    }

    private void OnOptionsChanged()
    {
        _barChartConfig.Data.Labels.Clear();
        _barChartConfig.Data.Labels.AddRange(_session.Options.Select(o => o.Name));
        UpdateResultChart();
        InvokeAsync(StateHasChanged);
    }

    private void OnParticipantsChanged() => InvokeAsync(StateHasChanged);
}
