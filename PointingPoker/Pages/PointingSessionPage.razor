@page "/pointing/{sessionId}"

@implements IDisposable
@using PointingPoker.Data
@inject UserManager UserManager
@inject PointingSessionManager PointingSessionManager


@if (_isLoading)
{
    <h3 class="text-center m-auto">Loading...</h3>
}
else if (_session == null)
{
    <h3 class="text-center m-auto">Woops! Couldn't find your session :(</h3>
}
else
{
    <div class="pointing-session w-100 h-100 d-flex flex-column">
        <div class="pointing-session-top d-flex flex-row flex-grow-1">
            <div class="pointing-session-left d-flex flex-column flex-shrink-0">
                @foreach (var participant in _session.Participants)
                {
                    var userVote = _session.GetVoteByUserAndTopic(participant.UserId, SelectedTopic?.Topic.Id);
                    var voteOption = _session.Options.FirstOrDefault(o => o.Id == userVote?.OptionId);
                    <div class="voting-participant d-flex flex-row pl-3 pr-3 align-items-center">
                        <span class="oi oi-person voting-participant-icon @(userVote != null ? "voted" : "")" />
                        <div class="voting-participant-text-container d-flex flex-column flex-grow-1 align-items-start pl-2 pt-1 pb-1">
                            <span class="voting-participant-text">@(string.IsNullOrEmpty(participant.Name) ? "<No name>" : participant.Name)</span>
                            <div class="voting-participant-status">@(voteOption != null ? voteOption.Name : "Waiting...")</div>
                        </div>
                    </div>
                }
            </div>
            <div class="pointing-session-right d-flex flex-column flex-grow-1">
                <div class="pointing-session-topic-container d-flex flex-wrap flex-row pl-2">
                    <button @onclick="AddTopic" class="btn pointing-session-topic-topic-text oi oi-plus m-2" />
                    @foreach (var topic in _session.Topics)
                    {
                        <button @onclick="(e => ChangeSelectedTopic(topic.Topic.Id))" class="btn pointing-session-topic-topic-text pt-1 pb-1 pl-2 pr-2 m-2 @(SelectedTopic != null && SelectedTopic.Topic.Id == topic.Topic.Id ? "selected":"")">@topic.Topic.Name</button>
                    }
                </div>

                <div class="container p-2">
                    <div class="d-flex flex-column">
                        <div class="d-flex flex-row mt-2 mb-2">
                            <input class="form-control" type="text" placeholder="Name" value="@SelectedTopic?.Topic.Name" @onchange="(e => UpdatePointingTopic(SelectedTopic.Topic.Id, e.Value.ToString(), SelectedTopic?.Topic.Discussion))" />
                        </div>

                        <div class="d-flex flex-row mt-2 mb-2">
                            <textarea class="form-control" placeholder="Discussion..." value="@SelectedTopic?.Topic.Discussion" @onchange="(e => UpdatePointingTopic(SelectedTopic.Topic.Id, SelectedTopic?.Topic.Name, e.Value.ToString()))"></textarea>
                        </div>

                        @if (Participant != null)
                        {
                            <div class="d-flex flex-row mt-2 mb-2 justify-content-around flex-wrap">
                                @foreach (var option in _session.Options)
                                {
                                    <button class="btn @(SelectedVote != null && SelectedVote.OptionId == option.Id ? "btn-success":"btn-info") p-2 m-1" @onclick="(e => Vote(option.Id))">@option.Name</button>
                                }
                            </div>
                        }
                        else
                        {
                            <span class="m-a">You are currently spectating, <a href="/name/@_session.Id">Join</a> the session to participate in voting!</span>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="pointing-session-bottom">
        </div>
    </div>
}


@code {
    private bool _isLoading = true;
    private string _userId = string.Empty;
    private PointingSession _session = null;

    [Parameter]
    public string SessionId { get; set; } = string.Empty;

    public string Username { get; set; } = string.Empty;

    public Participant Participant { get; set; }

    public VotingTopic SelectedTopic { get; set; }

    public Vote SelectedVote { get; set; }

    protected override void OnInitialized()
    {
        _session = PointingSessionManager.Get(SessionId);
        if (_session != null)
        {
            _session.OnVotesChanged += OnVotesChanged;
            _session.OnTopicsChanged += OnTopicsChanged;
            _session.OnOptionsChanged += OnOptionsChanged;
            _session.OnParticipantsChanged += OnParticipantsChanged;
            SelectedTopic = _session.Topics.FirstOrDefault();
        }
        else
        {
            _isLoading = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _session != null)
        {
            _userId = await UserManager.GetUserIdAsync();
            Participant = _session.FindParticipant(_userId);
            SelectedVote = _session.GetVoteByUserAndTopic(_userId, SelectedTopic?.Topic.Id);

            _isLoading = false;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        if (_session != null)
        {
            _session.OnOptionsChanged -= OnVotesChanged;
            _session.OnOptionsChanged -= OnTopicsChanged;
            _session.OnOptionsChanged -= OnOptionsChanged;
            _session.OnOptionsChanged -= OnParticipantsChanged;
        }
    }

    private void ChangeSelectedTopic(string topicId)
    {
        SelectedTopic = _session.FindTopic(topicId);
        SelectedVote = _session.GetVoteByUserAndTopic(_userId, SelectedTopic?.Topic.Id);
    }

    private void AddTopic()
    {
        _session.AddTopic(new Topic("New", ""));
    }

    private void Join()
    {

    }

    private void Vote(string optionId)
    {
        if (Participant != null)
        {
            _session.Vote(_userId, SelectedTopic?.Topic.Id, optionId);
        }
    }

    private void UpdatePointingTopic(string id, string name, string discussion)
    {
        _session.UpdateTopic(new Topic(id, name, discussion));
    }

    private void OnVotesChanged()
    {
        SelectedVote = _session.GetVoteByUserAndTopic(_userId, SelectedTopic?.Topic.Id);
        InvokeAsync(StateHasChanged);
    }

    private void OnTopicsChanged()
    {
        SelectedTopic = _session.FindTopic(SelectedTopic?.Topic.Id);
        SelectedVote = _session.GetVoteByUserAndTopic(_userId, SelectedTopic?.Topic.Id);
        InvokeAsync(StateHasChanged);
    }

    private void OnOptionsChanged() => InvokeAsync(StateHasChanged);

    private void OnParticipantsChanged() => InvokeAsync(StateHasChanged);
}
