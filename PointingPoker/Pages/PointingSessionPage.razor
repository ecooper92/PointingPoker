@page "/pointing/{sessionId}"

@implements IDisposable

@inject UserManager UserManager
@inject NavigationManager NavigationManager
@inject PointingSessionManager PointingSessionManager

@using PointingPoker.Data

@if (_isLoading)
{
    @*<h3 class="text-center m-auto">Loading...</h3>*@
}
else if (_session == null)
{
    <h3 class="text-center m-auto">Woops! Couldn't find your session :(</h3>
}
else
{
    var activeTopic = _session.FindTopic(_session.ActiveVotingTopicId);
<div class="w-100 h-100">
    <div class="main-row d-flex h-100">
        <div class="story-column flex-shrink-0">
            <div class="card h-100">
                <div class="d-flex flex-row justify-content-between align-items-center border-bottom">
                    <h5 class="ml-3 mt-2 mb-2">Stories</h5>
                    <div class="d-flex flex-wrap flex-row pl-2">
                        <button class="btn pointing-session-control oi oi-plus ml-2 mr-2" title="Add Story" @onclick="@(e => _topicModal.Show("Add Story"))" />
                    </div>
                </div>
                <div class="card-body p-0" style="min-height:0; overflow-y:auto; overflow-x:hidden">
                    @foreach (var topic in _session.Topics)
                    {
                        <div class="topic-container d-flex flex-row justify-content-between align-items-center pl-2 pr-2">
                            <div class="d-flex flex-row align-items-center">
                                <span class="topic-state oi mr-2 @(activeTopic != null && activeTopic.Id == topic.Id ? "oi-caret-right" : "oi-clock")"></span>
                                <div class="topic-text">@topic.Topic.Name</div>
                            </div>
                            <div class="d-flex flex-row align-items-center">
                                @if (activeTopic == null || activeTopic.Id != topic.Id)
                                {
                                    <div class="p-2 pointer topic-highlight-icon-container" @onclick="(e => ChangeSelectedTopic(topic.Id))">
                                        <span class="topic-highlight-icon oi oi-media-play"></span>
                                    </div>
                                }
                                <div class="p-2 pointer topic-highlight-icon-container">
                                    <span class="topic-highlight-icon oi oi-pencil"></span>
                                </div>
                                <div class="p-2 pointer topic-highlight-icon-container">
                                    <span class="topic-highlight-icon oi oi-trash"></span>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="voting-column flex-grow-1">
            <div class="card h-100">
                <div class="d-flex flex-row justify-content-between">
                    <h5 class="ml-3 mt-2 mb-2">Voting</h5>
                    <div class="pointing-session-control-container d-flex flex-wrap flex-row pl-2">
                        @if (activeTopic != null && !activeTopic.IsComplete)
                        {
                            <button class="btn pointing-session-control oi oi-check ml-1 mr-1" @onclick="(e => _session.CompleteVoting(activeTopic.Id))" title="Complete Votes" />
                        }
                        @if (activeTopic != null && activeTopic.IsComplete)
                        {
                            <button class="btn pointing-session-control oi oi-reload ml-1 mr-1" @onclick="(e => _session.ClearVoting(activeTopic.Id))" title="Reset Votes" />
                        }
                        <button class="btn pointing-session-control oi oi-graph ml-1 mr-1" @onclick=@(e => _votingResultsModal.Show()) title="Show Results" />
                        <button class="btn pointing-session-control oi oi-cog ml-1 mr-1" @onclick=@(e => _configureSessionModal.Show()) title="Configure Session" />
                    </div>
                </div>
                <div class="card-body p-0 border-top" style="min-height:0">
                    <div class="tab-content h-100">
                        <div class="d-flex flex-column w-100 h-100">
                            <div class="d-flex flex-row w-100 flex-grow-1" style="min-height:0">
                                <div id="participant-column" class="d-flex flex-column flex-shrink-0 h-100 border-right" style="overflow-y:auto; overflow-x:hidden">
                                    <h6 class="m-2">Participants</h6>
                                    @foreach (var participant in _session.Participants)
                                    {
                                        var vote = _session.GetVote(participant.UserId, _session.ActiveVotingTopicId);
                                        var voteOption = _session.Options.FirstOrDefault(o => o.Id == vote?.OptionId);
                                        <VotingParticipant Participant=@participant Vote=@vote VoteOption=@voteOption IsShowingVote=@(activeTopic != null && activeTopic.IsComplete) />
                                    }
                                </div>
                                <div class="d-flex flex-column w-100">
                                    @if (activeTopic != null)
                                    {
                                        <div class="pt-3 pl-3 pr-3">
                                            <textarea class="form-control">@activeTopic?.Topic.Discussion</textarea>
                                        </div>
                                        <div class="d-flex flex-row mt-2 mb-2 justify-content-around flex-wrap flex-grow-1 w-100 p-1 pr-2" style="overflow-y:auto; overflow-x:hidden">
                                            @foreach (var option in _session.Options)
                                            {
                                                <div class="voting-button-wrapper p-2">
                                                    <button class="voting-button w-100 h-100 btn @(SelectedVote != null && SelectedVote.OptionId == option.Id ? "btn-success":"btn-outline-info") p-2 m-1" @onclick="(e => Vote(option.Id))">@option.Name</button>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else if (Participant != null)
                                    {
                                        <div class="d-flex flex-column justify-content-center align-items-center">
                                            @if (Participant.Type == ParticipantType.Moderator)
                                            {
                                                <h5>Moderator</h5>
                                            }
                                            else
                                            {
                                                <h5>Waiting for a moderator to select the next story.</h5>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @* Modals *@
    @* Story modal *@
    <TopicModal @ref="_topicModal" Command="((name, description) => _session.AddTopic(new Topic(name, description)))" />

    @* Join session modal *@
    <JoinSessionModal @ref="_joinSessionModal" OnJoin="Join" />

    @* Voting results modal *@
    <VotingResultsModal @ref="_votingResultsModal" Options=@_session.Options Votes=@(activeTopic?.Votes ?? new Vote[0])/>

    @* Configure session modal *@
    <ConfigureSessionModal @ref="_configureSessionModal" Options=@_session.Options OnOptionAdded="(o => _session.AddOption(o))" OnOptionUpdated="(o => _session.UpdateOption(o))" OnOptionRemoved="(id => _session.RemoveOption(id))" />
</div>
}


@code {
    private bool _isLoading = true;
    private string _userId = string.Empty;
    private PointingSession _session = null;
    private TopicModal _topicModal;
    private VotingResultsModal _votingResultsModal;
    private JoinSessionModal _joinSessionModal;
    private ConfigureSessionModal _configureSessionModal;

    [Parameter]
    public string SessionId { get; set; } = string.Empty;

    public Participant Participant { get; set; }

    //public string SelectedTopicId { get; set; }

    public Vote SelectedVote { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _userId = await UserManager.GetUserIdAsync();
        _session = PointingSessionManager.Get(SessionId);
        if (_session != null)
        {
            _session.OnUpdate += OnUpdate;
            //SelectedTopicId = _session.Topics.Select(t => t.Id).FirstOrDefault();
            Participant = _session.FindParticipant(_userId);
            SelectedVote = _session.GetVote(_userId, _session.ActiveVotingTopicId);
        }

        _isLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Participant == null && _joinSessionModal != null)
            {
                await _joinSessionModal.Show();
            }
        }
    }

    public void Dispose()
    {
        if (_session != null)
        {
            _session.OnUpdate -= OnUpdate;
        }
    }

    private void ChangeSelectedTopic(string topicId)
    {
        _session.ActiveVotingTopicId = topicId;
        SelectedVote = _session.GetVote(_userId, _session.ActiveVotingTopicId);
    }

    private void LeaveSession()
    {
        _session.RemoveParticipant(_userId);
        Participant = null;
    }

    private void Join(string username, ParticipantType type)
    {
        if (!string.IsNullOrEmpty(username))
        {
            var participant = new Participant(_userId, username, type);
            _session.AddParticipant(participant);

            Participant = participant;
        }
    }

    private void Vote(string optionId)
    {
        if (Participant != null)
        {
            _session.Vote(_userId, _session.ActiveVotingTopicId, optionId);
        }
    }

    private async void OnUpdate()
    {
        SelectedVote = _session.GetVote(_userId, _session.ActiveVotingTopicId);
        await InvokeAsync(StateHasChanged);
    }
}
