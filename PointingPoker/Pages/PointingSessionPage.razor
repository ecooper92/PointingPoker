@page "/pointing/{sessionId}"

@layout SessionLayout

@implements IDisposable
@using PointingPoker.Data
@using ChartJs.Blazor;
@using ChartJs.Blazor.ChartJS.BarChart
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Wrappers
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.Util
@inject UserManager UserManager
@inject NavigationManager NavigationManager
@inject PointingSessionManager PointingSessionManager

@if (_isLoading)
{
    <h3 class="text-center m-auto">Loading...</h3>
}
else if (_session == null)
{
    <h3 class="text-center m-auto">Woops! Couldn't find your session :(</h3>
}
else
{
    <div class="pointing-session w-100 h-100 d-flex flex-column">
        <div style="overflow-x: hidden; overflow-y: hidden" class="d-flex flex-row flex-grow-1">
            <div style="background-color: white; overflow-y: auto; overflow-x: hidden" class="d-flex flex-column flex-shrink-0">
                @foreach (var participant in _session.Participants)
                {
                    var userVote = _session.GetVoteByUserAndTopic(participant.UserId, SelectedTopicId);
                    var voteOption = _session.Options.FirstOrDefault(o => o.Id == userVote?.OptionId);
                    <div class="voting-participant d-flex flex-row pl-3 pr-3 align-items-center">
                        <span class="oi oi-person voting-participant-icon @(userVote != null ? "voted" : "")" />
                        <div class="voting-participant-text-container d-flex flex-column flex-grow-1 align-items-start pl-2 pt-1 pb-1">
                            <span class="voting-participant-text">@(string.IsNullOrEmpty(participant.Name) ? "<No name>" : participant.Name)</span>
                            <div class="voting-participant-status">@(voteOption == null ? "Waiting..." : (!_session.IsShowingTopic(SelectedTopicId) ? "Voted!" : voteOption.Name))</div>
                        </div>
                    </div>
                }
            </div>
            <div style="overflow-y: auto; overflow-x: hidden" class="pointing-session-right d-flex flex-column flex-grow-1">
                <div class="pointing-session-control-container d-flex flex-wrap flex-row pl-2">
                    <button @onclick="(e => _session.SetVotesShowing(SelectedTopicId, !_session.IsShowingTopic(SelectedTopicId)))" class="btn pointing-session-control oi oi-eye m-2 @(_session.IsShowingTopic(SelectedTopicId) ? "highlight" : "")" title="@(_session.IsShowingTopic(SelectedTopicId) ? "Hide Votes" : "Show Votes")" />
                    <button @onclick="(e => _session.ResetVotes(SelectedTopicId))" class="btn pointing-session-control oi oi-reload m-2" title="Reset Votes" />
                    <button class="btn pointing-session-control oi oi-cog m-2" data-toggle="modal" data-target="#ConfigureSessionWindow" title="Configure Session" />
                    @if (Participant != null)
                    {
                        <button @onclick="LeaveSession" class="btn pointing-session-control oi oi-account-logout m-2" title="Leave Session" />
                    }
                </div>
                <div class="pointing-session-topic-container d-flex flex-wrap flex-row pl-2">
                    <button @onclick="AddTopic" class="btn pointing-session-topic-topic-text oi oi-plus m-2" />
                    @foreach (var topic in _session.Topics)
                    {
                        <button @onclick="(e => ChangeSelectedTopic(topic.Topic.Id))" class="btn pointing-session-topic-topic-text pt-1 pb-1 pl-2 pr-2 m-2 @(SelectedTopicId == topic.Topic.Id ? "selected" : "")">@topic.Topic.Name</button>
                    }
                </div>

                <div class="d-flex flex-column p-2">
                    <div class="d-flex flex-row mt-2 mb-2">
                        <input class="form-control" type="text" placeholder="Name" value="@_session.FindTopic(SelectedTopicId)?.Topic.Name" @onchange="(e => UpdatePointingTopic(SelectedTopicId, e.Value.ToString(), _session.FindTopic(SelectedTopicId)?.Topic.Discussion))" />
                    </div>
                    @if (Participant != null)
                    {
                        <div class="d-flex flex-row mt-2 mb-2 justify-content-around flex-wrap">
                            @foreach (var option in _session.Options)
                            {
                                <button class="btn @(SelectedVote != null && SelectedVote.OptionId == option.Id ? "btn-success":"btn-info") p-2 m-1" @onclick="(e => Vote(option.Id))">@option.Name</button>
                            }
                        </div>
                    }
                    else
                    {
                        <span class="text-center">You are currently spectating, <span class="btn-link" data-toggle="modal" data-target="#JoinSessionWindow">Join</span> the session to participate in voting!</span>
                    }
                </div>
                

                <div class="voting-results-container flex-grow-1">
                    <ChartJsBarChart @ref="_barChart" Config="@_barChartConfig"></ChartJsBarChart>
                </div>
            </div>
        </div>
        <div class="modal fade" id="JoinSessionWindow" tabindex="-1" role="dialog" aria-labelledby="JoinSessionWindow" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Join Session</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <input class="form-control col-12" placeholder="Participant Name" @bind="@Username" />
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" @onclick="(e => Join(Username))" data-dismiss="modal">Join</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="ConfigureSessionWindow" tabindex="-1" role="dialog" aria-labelledby="JoinSessionWindow" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Configure Session</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <h4 class="card-title text-center col-12 mt-1">Pointing Options</h4>
                        </div>
                        @*<p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>*@
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Value</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var option in _session.Options)
                                {
                                <tr>
                                    <td>
                                        <input class="form-control" type="text" value="@option.Name" @onchange="(e => UpdatePointingOption(option.Id, e.Value.ToString(), option.Value))" />
                                    </td>
                                    <td>
                                        <input class="form-control" type="text" value="@option.Value" @onchange="(e => UpdatePointingOption(option.Id, option.Name, e.Value.ToString()))" />
                                    </td>
                                    <td>
                                        <a class="oi oi-trash" style="cursor: pointer;" @onclick="(() => _session.RemoveOption(option.Id))"></a>
                                    </td>
                                </tr>
                                }
                            </tbody>
                        </table>
                        <div class="row">
                            <div class="col-6 offset-3">
                                <div class="btn-group" role="group" aria-label="Preset Selector">
                                    @foreach (var preset in _session.OptionPresets)
                                    {
                                        <button type="button" class="btn btn-outline-primary @(_session.SelectedOptionsPreset == preset ? "active":"")" @onclick="(e => _session.SetOptionPreset(preset))">@preset</button>
                                    }
                                    <button type="button" class="btn btn-outline-primary @(string.IsNullOrEmpty(_session.SelectedOptionsPreset) ? "active":"")">Custom</button>
                                </div>
                            </div>
                            <div class="offset-1 col-2 mb-1">
                                <button class="btn btn-primary float-right" @onclick="AddPointingOption">Add</button>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private bool _isLoading = true;
    private string _userId = string.Empty;
    private PointingSession _session = null;
    private BarConfig _barChartConfig;
    private ChartJsBarChart _barChart;
    private BarDataset<Int32Wrapper> _barDataSet;

    [Parameter]
    public string SessionId { get; set; } = string.Empty;

    public string Username { get; set; } = string.Empty;

    public Participant Participant { get; set; }

    public string SelectedTopicId { get; set; }

    public Vote SelectedVote { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _session = PointingSessionManager.Get(SessionId);
        if (_session != null)
        {
            _session.OnVotesChanged += OnVotesChanged;
            _session.OnTopicsChanged += OnTopicsChanged;
            _session.OnOptionsChanged += OnOptionsChanged;
            _session.OnParticipantsChanged += OnParticipantsChanged;
            SelectedTopicId = _session.Topics.Select(t => t.Topic.Id).FirstOrDefault();


            _barChartConfig = new BarConfig(ChartType.Bar)
            {
                Options = new BarOptions
                {
                    //Title = new ChartJs.Blazor.ChartJS.Common.Properties.OptionsTitle { Display = true, Text = "Results" },
                    Responsive = true,
                    MaintainAspectRatio = false,
                    Scales = new BarScales
                    {
                        YAxes = new List<ChartJs.Blazor.ChartJS.Common.Axes.CartesianAxis>
                    {
                            new ChartJs.Blazor.ChartJS.Common.Axes.LinearCartesianAxis
                            {
                                Ticks = new ChartJs.Blazor.ChartJS.Common.Axes.Ticks.LinearCartesianTicks { AutoSkip = false, Min = 0 }
                            }
                        }
                    }
                }
            };

            _barChartConfig.Data.Labels.AddRange(_session.Options.Select(o => o.Name));
            _barDataSet = new BarDataset<Int32Wrapper>(ChartType.Bar);
            _barDataSet.Label = "Results";
            _barDataSet.BorderWidth = 1;
            _barDataSet.BackgroundColor = _session.Options.Select(o => ColorUtil.RandomColorString()).ToArray();
            _barChartConfig.Data.Datasets.Add(_barDataSet);
            await UpdateResultChart();
        }
        else
        {
            _isLoading = false;
        }
    }

    private void ConfigureSession()
    {
        NavigationManager.NavigateTo($"/configure/{_session.Id}");
    }

    private async Task UpdateResultChart()
    {
        _barDataSet.RemoveAll(e => true);
        var topic = _session.FindTopic(SelectedTopicId);
        if (topic != null && topic.IsShowing)
        {
            _barDataSet.AddRange(_session.Options.Select(o => topic.Votes.Where(v => v.OptionId == o.Id).Count()).Wrap());
        }

        if (_barChart != null)
        {
            await _barChart.Update();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _session != null)
        {
            _userId = await UserManager.GetUserIdAsync();
            Participant = _session.FindParticipant(_userId);
            SelectedVote = _session.GetVoteByUserAndTopic(_userId, SelectedTopicId);

            _isLoading = false;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        if (_session != null)
        {
            _session.OnVotesChanged -= OnVotesChanged;
            _session.OnTopicsChanged -= OnTopicsChanged;
            _session.OnOptionsChanged -= OnOptionsChanged;
            _session.OnParticipantsChanged -= OnParticipantsChanged;

            /*if (Participant != null)
            {
                _session.RemoveParticipant(_userId);
            }*/
        }
    }

    private void AddPointingOption()
    {
        _session.AddOption("?", "?");
    }

    private void UpdatePointingOption(string id, string name, string value)
    {
        _session.UpdateOption(id, name, value);
    }

    private void ChangeSelectedTopic(string topicId)
    {
        SelectedTopicId = topicId;
        SelectedVote = _session.GetVoteByUserAndTopic(_userId, SelectedTopicId);
        UpdateResultChart();
    }

    private void LeaveSession()
    {
        _session.RemoveParticipant(_userId);
        Participant = null;
    }

    private void AddTopic()
    {
        _session.AddTopic(new Topic("New", ""));
    }

    private void Join(string username)
    {
        var participant = new Participant(_userId, username);
        _session.AddParticipant(participant);

        Participant = participant;
    }

    private void Vote(string optionId)
    {
        if (Participant != null)
        {
            _session.Vote(_userId, SelectedTopicId, optionId);
        }
    }

    private void UpdatePointingTopic(string id, string name, string discussion)
    {
        _session.UpdateTopic(new Topic(id, name, discussion));
    }

    private void OnVotesChanged()
    {
        SelectedVote = _session.GetVoteByUserAndTopic(_userId, SelectedTopicId);
        UpdateResultChart();
        InvokeAsync(StateHasChanged);
    }

    private void OnTopicsChanged()
    {
        SelectedVote = _session.GetVoteByUserAndTopic(_userId, SelectedTopicId);
        InvokeAsync(StateHasChanged);
    }

    private void OnOptionsChanged()
    {
        _barChartConfig.Data.Labels.Clear();
        _barChartConfig.Data.Labels.AddRange(_session.Options.Select(o => o.Name));
        UpdateResultChart();
        InvokeAsync(StateHasChanged);
    }

    private void OnParticipantsChanged() => InvokeAsync(StateHasChanged);
}
